

************************************************************************************


Arduino library for asynchronous playback of PCM/WAV files direct from SD card

Requires SD library, SD card and output device (Speaker, Headphones, Amplifier, etc)

************************************************************************************

Features

- PCM/WAV playback direct from SD card

- Asynchronous Playback: Allows code in main loop to run while audio playback occurs.

- Playback uses a single timer: Timer 1 (Uno,Mega) or Timer 3,4 or 5 (Mega)

- Supported formats: WAV files, 8-bit, 8-20khz Sample Rate, mono

- Supported devices: Arduino Uno, Nano, Mega, etc.

- Supports complimentary output or dual speakers

- Files easily converted using iTunes or other software:

  iTunes Conversion:  
    Click _> Edit > Preferences > Import Settings_  
    Change the dropdown to _WAV Encoder_ and Setting: _Custom > 16.000kHz, 8-bit, Mono_  
    Right click any file in iTunes, and select _"Create WAV Version"_  
    Copy file to SD card using computer   
    
************************************************************************************

Usage:
 TMRpcm audio;
 audio.play("filename"); plays a file
 audio.speakerPin = 11; set to 5,6,11 or 46 for Mega, 9 for Uno, Nano, etc
 audio.disable(); disables the timer on output pin and stops the music
 audio.stopPlayback(); stops the music, but leaves the timer running
 audio.isPlaying();  returns 1 if music playing, 0 if not
 audio.pause();  pauses/unpauses playback
 REMOVED audio.pwmMode = 1; Now uses only fast pwm
 audio.volume(0); 1(up) or 0(down) NEW: Using bitshift for wider range of volume control

************************************************************************************

Also included is optional proof-of-concept add-on for RF streaming of PCM/WAV files using
NRF24l01+ radio modules.

RF Streaming requires library: http://maniacbug.github.com/RF24/index.html

See README in RF_AddOn folder for more details


************************************************************************************
Details at http://tmrh20.blogspot.com
************************************************************************************
Contributed HowTo: http://maxoffsky.com/maxoffsky-blog/how-to-play-wav-audio-files-with-arduino-uno-and-microsd-card/
************************************************************************************

Known Limitations:

- This library is very processor intensive, so code execution during playback will be slower than normal
- Processing load can be reduced by using lower quality sounds encoded at a lower sample rate (8khz minimum)
- May interfere with other libraries that rely on interrupts. The isPlaying() function can be used to
  prevent parallel code execution.
- Update to volume control allows greater range in low volume control, but will distort
  if volume too high
************************************************************************************
